Bradley MontUID: 804-993-030Professor SmallbergCS 31, Lecture 1, Discussion 1DProgramming Assignment 5: Star Searcha. One notable obstacle that I overcame was dealing with duplicate letters in the probe word. For example, I would add an extra planet when the secret word was egret and the probe word was eerie because of the extra e’s. I solved this problem by creating arrays of bools for the probe word and secret word that represent whether or not that position contains a star or planet. By adding an if statement to make sure there wasn’t a true in these arrays for a character, I solved the duplicate problem. By solving this problem, I created a new obstacle: I declared the size of my arrays to be the length of the c string (secretWord or probeWord). However, this is not known at compile time, so this gave me an error. I overcame this obstacle by just declaring the size of the arrays to be MAXWORDLEN, and I just didn’t utilize all the spots if the word was less than 6 letters. Finally, I forgot multiple times to use strcmp for c strings instead of ==.b. My program first declares an array of C strings, gets the words to fill up the array, and then asks the user how many rounds he/she wants to play. Then it plays that many rounds. For one round, I randomly select a word from the list as the secret word, and the user inputs probe words to eventually guess the correct word. Within each word, if it contains a matching letter and position, that counts as a planet, and if it contains a matching letter in a different position, then that counts as a planet. I use arrays of bools to keep track of which positions already have stars or planets. Only words that are 4-6 lowercase letters and within the large words array are accepted. After the user guesses the word correctly, I display their score, average, minimum, and maximum score. int main(){	declare an array of C strings	fill the array with possible words		check for insufficient words	prompt the user for how many rounds to play		check for a positive number	repeatedly:		randomly choose a secret word		display the length of the secret word		run a round of the game		display some stats about the user’s performance}int runOneRound(const char words[][MAXWORDLEN+1], int nWords, int wordnum){	check for an invalid number of words		repeatedly		ask the user for a probe word			check if the probe word contains 4-6 lowercase letters only			check if the word is in the large array of words		check if the user guessed correctly		check for stars		check for planets (keep duplicates in mind)		display the number of stars and planets		return the number of tries}double calculateAverage(int totalTries, int roundNumber){	set precision	return the total tries divided by the round number}bool containsOnlyLowercase(const char word[MAXWORDLEN+1]){	repeatedly		check each character of the word to see if it is lowercase	return true if all lowercase}