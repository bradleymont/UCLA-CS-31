Bradley MontUID: 804-993-030Professor SmallbergCS 31, Lecture 1, Discussion 1DProgramming Assignment 6: What's the Point1a. Bugs:* *ptr + 1 needs parentheses. Should be *(ptr + 1)* Right before the while loop: ptr needs to be reset to point to the first position of the array so it can print in ascending order. "ptr = arr;" should be added to reset ptr to pointing to position 0.* The while loop should be structured so that ptr is increasing and stops once it points to the last position. The inside of the while loop should be "ptr < arr + 3" so it points to positions 0, 1, and 2 after being incremented.* Not only should ptr be incremented, but it also should be incremented after printing the value. It should be changed to ptr++; and placed after the line that prints the values.Fixed version:   int main()    {        int arr[3] = { 5, 10, 15 };        int* ptr = arr;        *ptr = 30;          // set arr[0] to 30        *(ptr + 1) = 20;      // set arr[1] to 20        ptr += 2;        ptr[0] = 10;        // set arr[2] to 10        ptr = arr;        while (ptr < arr + 3)        {            cout << *ptr << endl;    // print values            ptr++;        }    }b. This function doesn't work because due to the parameters of the findMax function, the pointer pToMax is passed by value, so a copy of it is made. Any alterations to it made by the function will only change the copy. A way to fix it would be to change the parameter int* pToMax to int*& pToMax instead. This will cause the pointer to be passed by reference, so the changes made by the function will be reflected in the actual pointer, and not just a copy. * Only change needed: the function should be the following:o void findMax(int arr[ ], int n, int*& pToMax)c. It may not work because in the main, ptr is never initialized to anything, so it causes an error when it tries to access what the pointer points to. A way to fix it is to change the 5 to a variable and then set ptr equal to the address of that variable. Fixed Version:    void computeCube(int n, int* ncubed)    {        *ncubed = n * n * n;    }    int main()    {        int x = 5;        int* ptr = &x;        computeCube(x, ptr);        cout << "Five cubed is " << *ptr << endl;    }d. The problem with the function is for every comparison that it does, it compares two addresses (pointers). Two characters can have the same value, but they'll have different addresses, so this is not the correct comparison we're looking for. Therefore, in all comparisons that use str1 and str2 (pointers), it should use *str1 and *str2, which will compare what characters the pointers point to. Fixed version:// return true if two C strings are equalbool strequal(const char str1[], const char str2[]){    while (*str1 != 0  &&  *str2 != 0)    {        if (*str1 != *str2)  // compare corresponding characters            return false;        str1++;            // advance to the next character        str2++;    }    return *str1 == *str2;   // both ended at same time?}int main(){    char a[15] = "Zhou";    char b[15] = "Zhu";        if (strequal(a,b))        cout << "They're the same person!\n";}e. When the getPtrToArray function is called, it creates an array within the function called anArray. The scope of this array extends to only within this function, and outside of the function, it's values cannot be accessed. Therefore, when the main function calls for ptr[i], it cannot access the value in anArray, so it's just accessing a garbage value.2. a.	double* cat;b.	double mouse[5];c. 	cat = &mouse[4];d.	*cat = 25;e.	*(mouse + 3) = 42;f.	cat -= 3;g.	cat[1]  = 54;h.	cat[0] = 27;i.	bool b = (*cat == *(cat + 1));j.	bool d = (cat == mouse);3a.double mean(const double* scores, int numScores){    double tot = 0;    for (int counter = 0; counter < numScores; counter++)    {        tot += *(scores + counter);    }    return tot/numScores;}3b.const char* findTheChar(const char* str, char chr){    for (int k = 0; *(str + k) != '\0'; k++)        if (*(str + k) == chr)            return str + k;        return nullptr;}3c.const char* findTheChar(const char* str, char chr){    while (*str != '\0')    {        if (*str == chr)        {            return str;        }        str++;    }        return nullptr;}4. The output is the following:3479-192219First, the maxwell function returns a pointer to array[0] because the value at array[0] > the value at array[2] (5>4). Then the value that ptr points to is set to -1, so array[0] = -1. Then 2 is added to ptr, so ptr now points to array[2]. Then, 9 is set to the position one after the one that ptr points to, so array[3] = 9. Then, 79 is set to be the value at one after the position of the start of the array, so array[1] = 79. Then, it prints out the address of array[5] – the address of array[2], so it justs prints out 5 – 2 which is 3. Then it does a swap1 with pointers to positions 0 and 1 of the array, but the function makes no changes because the pointers are passed by value, not reference. The copies of the pointers are swapped, which does nothing to the actual pointers. Then, it does a swap 2 with pointers to positions 0 and 2 of the array, which switches the values at positions 0 and 2 of the array. So array[0] is now 4, and array[2] is now -1. Then then for loop prints out each element of the array in increasing order, which prints 4, 79, -1, 9, 22, and 19 all on separate lines.5.void removeS(char* cstring){    if (*cstring == '\0')   //empty c string    {        return;    }        while (*(cstring + 1) != '\0')    {        if (*cstring == 's' || *cstring == 'S')        {            for (char* ptr = cstring; *ptr != '\0'; ptr++)            {                *ptr = *(ptr + 1);            }        }        else    //to check for consecutive s's        {            cstring++;        }    }        if (*cstring == 's' || *cstring == 'S') //check last character    {        *cstring = '\0';    }}